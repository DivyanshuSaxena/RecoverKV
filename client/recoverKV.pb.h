// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: recoverKV.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_recoverKV_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_recoverKV_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_recoverKV_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_recoverKV_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_recoverKV_2eproto;
namespace recoverKV {
class KillRequest;
class KillRequestDefaultTypeInternal;
extern KillRequestDefaultTypeInternal _KillRequest_default_instance_;
class PartitionRequest;
class PartitionRequestDefaultTypeInternal;
extern PartitionRequestDefaultTypeInternal _PartitionRequest_default_instance_;
class Request;
class RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class Response;
class ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
class StateRequest;
class StateRequestDefaultTypeInternal;
extern StateRequestDefaultTypeInternal _StateRequest_default_instance_;
}  // namespace recoverKV
PROTOBUF_NAMESPACE_OPEN
template<> ::recoverKV::KillRequest* Arena::CreateMaybeMessage<::recoverKV::KillRequest>(Arena*);
template<> ::recoverKV::PartitionRequest* Arena::CreateMaybeMessage<::recoverKV::PartitionRequest>(Arena*);
template<> ::recoverKV::Request* Arena::CreateMaybeMessage<::recoverKV::Request>(Arena*);
template<> ::recoverKV::Response* Arena::CreateMaybeMessage<::recoverKV::Response>(Arena*);
template<> ::recoverKV::StateRequest* Arena::CreateMaybeMessage<::recoverKV::StateRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace recoverKV {

// ===================================================================

class Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:recoverKV.Request) */ {
 public:
  inline Request() : Request(nullptr) {}
  virtual ~Request();

  Request(const Request& from);
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request& operator=(Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Request& default_instance();

  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }
  inline void Swap(Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Request* New() const final {
    return CreateMaybeMessage<Request>(nullptr);
  }

  Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "recoverKV.Request";
  }
  protected:
  explicit Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_recoverKV_2eproto);
    return ::descriptor_table_recoverKV_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectIDFieldNumber = 1,
    kKeyFieldNumber = 2,
    kValueFieldNumber = 3,
  };
  // string objectID = 1;
  void clear_objectid();
  const std::string& objectid() const;
  void set_objectid(const std::string& value);
  void set_objectid(std::string&& value);
  void set_objectid(const char* value);
  void set_objectid(const char* value, size_t size);
  std::string* mutable_objectid();
  std::string* release_objectid();
  void set_allocated_objectid(std::string* objectid);
  private:
  const std::string& _internal_objectid() const;
  void _internal_set_objectid(const std::string& value);
  std::string* _internal_mutable_objectid();
  public:

  // string key = 2;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string value = 3;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:recoverKV.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr objectid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_recoverKV_2eproto;
};
// -------------------------------------------------------------------

class Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:recoverKV.Response) */ {
 public:
  inline Response() : Response(nullptr) {}
  virtual ~Response();

  Response(const Response& from);
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response& operator=(Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Response& default_instance();

  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Response* New() const final {
    return CreateMaybeMessage<Response>(nullptr);
  }

  Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "recoverKV.Response";
  }
  protected:
  explicit Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_recoverKV_2eproto);
    return ::descriptor_table_recoverKV_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
    kSuccessCodeFieldNumber = 2,
  };
  // string value = 1;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // int32 successCode = 2;
  void clear_successcode();
  ::PROTOBUF_NAMESPACE_ID::int32 successcode() const;
  void set_successcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_successcode() const;
  void _internal_set_successcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:recoverKV.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::int32 successcode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_recoverKV_2eproto;
};
// -------------------------------------------------------------------

class StateRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:recoverKV.StateRequest) */ {
 public:
  inline StateRequest() : StateRequest(nullptr) {}
  virtual ~StateRequest();

  StateRequest(const StateRequest& from);
  StateRequest(StateRequest&& from) noexcept
    : StateRequest() {
    *this = ::std::move(from);
  }

  inline StateRequest& operator=(const StateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StateRequest& operator=(StateRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StateRequest& default_instance();

  static inline const StateRequest* internal_default_instance() {
    return reinterpret_cast<const StateRequest*>(
               &_StateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(StateRequest& a, StateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StateRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StateRequest* New() const final {
    return CreateMaybeMessage<StateRequest>(nullptr);
  }

  StateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StateRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StateRequest& from);
  void MergeFrom(const StateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "recoverKV.StateRequest";
  }
  protected:
  explicit StateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_recoverKV_2eproto);
    return ::descriptor_table_recoverKV_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectIDFieldNumber = 1,
    kServersListFieldNumber = 2,
  };
  // string objectID = 1;
  void clear_objectid();
  const std::string& objectid() const;
  void set_objectid(const std::string& value);
  void set_objectid(std::string&& value);
  void set_objectid(const char* value);
  void set_objectid(const char* value, size_t size);
  std::string* mutable_objectid();
  std::string* release_objectid();
  void set_allocated_objectid(std::string* objectid);
  private:
  const std::string& _internal_objectid() const;
  void _internal_set_objectid(const std::string& value);
  std::string* _internal_mutable_objectid();
  public:

  // string serversList = 2;
  void clear_serverslist();
  const std::string& serverslist() const;
  void set_serverslist(const std::string& value);
  void set_serverslist(std::string&& value);
  void set_serverslist(const char* value);
  void set_serverslist(const char* value, size_t size);
  std::string* mutable_serverslist();
  std::string* release_serverslist();
  void set_allocated_serverslist(std::string* serverslist);
  private:
  const std::string& _internal_serverslist() const;
  void _internal_set_serverslist(const std::string& value);
  std::string* _internal_mutable_serverslist();
  public:

  // @@protoc_insertion_point(class_scope:recoverKV.StateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr objectid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serverslist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_recoverKV_2eproto;
};
// -------------------------------------------------------------------

class KillRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:recoverKV.KillRequest) */ {
 public:
  inline KillRequest() : KillRequest(nullptr) {}
  virtual ~KillRequest();

  KillRequest(const KillRequest& from);
  KillRequest(KillRequest&& from) noexcept
    : KillRequest() {
    *this = ::std::move(from);
  }

  inline KillRequest& operator=(const KillRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline KillRequest& operator=(KillRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KillRequest& default_instance();

  static inline const KillRequest* internal_default_instance() {
    return reinterpret_cast<const KillRequest*>(
               &_KillRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(KillRequest& a, KillRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(KillRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KillRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KillRequest* New() const final {
    return CreateMaybeMessage<KillRequest>(nullptr);
  }

  KillRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KillRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KillRequest& from);
  void MergeFrom(const KillRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KillRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "recoverKV.KillRequest";
  }
  protected:
  explicit KillRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_recoverKV_2eproto);
    return ::descriptor_table_recoverKV_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectIDFieldNumber = 1,
    kServerNameFieldNumber = 2,
    kCleanTypeFieldNumber = 3,
  };
  // string objectID = 1;
  void clear_objectid();
  const std::string& objectid() const;
  void set_objectid(const std::string& value);
  void set_objectid(std::string&& value);
  void set_objectid(const char* value);
  void set_objectid(const char* value, size_t size);
  std::string* mutable_objectid();
  std::string* release_objectid();
  void set_allocated_objectid(std::string* objectid);
  private:
  const std::string& _internal_objectid() const;
  void _internal_set_objectid(const std::string& value);
  std::string* _internal_mutable_objectid();
  public:

  // string serverName = 2;
  void clear_servername();
  const std::string& servername() const;
  void set_servername(const std::string& value);
  void set_servername(std::string&& value);
  void set_servername(const char* value);
  void set_servername(const char* value, size_t size);
  std::string* mutable_servername();
  std::string* release_servername();
  void set_allocated_servername(std::string* servername);
  private:
  const std::string& _internal_servername() const;
  void _internal_set_servername(const std::string& value);
  std::string* _internal_mutable_servername();
  public:

  // int32 cleanType = 3;
  void clear_cleantype();
  ::PROTOBUF_NAMESPACE_ID::int32 cleantype() const;
  void set_cleantype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cleantype() const;
  void _internal_set_cleantype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:recoverKV.KillRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr objectid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr servername_;
  ::PROTOBUF_NAMESPACE_ID::int32 cleantype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_recoverKV_2eproto;
};
// -------------------------------------------------------------------

class PartitionRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:recoverKV.PartitionRequest) */ {
 public:
  inline PartitionRequest() : PartitionRequest(nullptr) {}
  virtual ~PartitionRequest();

  PartitionRequest(const PartitionRequest& from);
  PartitionRequest(PartitionRequest&& from) noexcept
    : PartitionRequest() {
    *this = ::std::move(from);
  }

  inline PartitionRequest& operator=(const PartitionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PartitionRequest& operator=(PartitionRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PartitionRequest& default_instance();

  static inline const PartitionRequest* internal_default_instance() {
    return reinterpret_cast<const PartitionRequest*>(
               &_PartitionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PartitionRequest& a, PartitionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PartitionRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PartitionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PartitionRequest* New() const final {
    return CreateMaybeMessage<PartitionRequest>(nullptr);
  }

  PartitionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PartitionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PartitionRequest& from);
  void MergeFrom(const PartitionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PartitionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "recoverKV.PartitionRequest";
  }
  protected:
  explicit PartitionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_recoverKV_2eproto);
    return ::descriptor_table_recoverKV_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectIDFieldNumber = 1,
    kServerNameFieldNumber = 2,
    kReachableFieldNumber = 3,
  };
  // string objectID = 1;
  void clear_objectid();
  const std::string& objectid() const;
  void set_objectid(const std::string& value);
  void set_objectid(std::string&& value);
  void set_objectid(const char* value);
  void set_objectid(const char* value, size_t size);
  std::string* mutable_objectid();
  std::string* release_objectid();
  void set_allocated_objectid(std::string* objectid);
  private:
  const std::string& _internal_objectid() const;
  void _internal_set_objectid(const std::string& value);
  std::string* _internal_mutable_objectid();
  public:

  // string serverName = 2;
  void clear_servername();
  const std::string& servername() const;
  void set_servername(const std::string& value);
  void set_servername(std::string&& value);
  void set_servername(const char* value);
  void set_servername(const char* value, size_t size);
  std::string* mutable_servername();
  std::string* release_servername();
  void set_allocated_servername(std::string* servername);
  private:
  const std::string& _internal_servername() const;
  void _internal_set_servername(const std::string& value);
  std::string* _internal_mutable_servername();
  public:

  // string reachable = 3;
  void clear_reachable();
  const std::string& reachable() const;
  void set_reachable(const std::string& value);
  void set_reachable(std::string&& value);
  void set_reachable(const char* value);
  void set_reachable(const char* value, size_t size);
  std::string* mutable_reachable();
  std::string* release_reachable();
  void set_allocated_reachable(std::string* reachable);
  private:
  const std::string& _internal_reachable() const;
  void _internal_set_reachable(const std::string& value);
  std::string* _internal_mutable_reachable();
  public:

  // @@protoc_insertion_point(class_scope:recoverKV.PartitionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr objectid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr servername_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reachable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_recoverKV_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Request

// string objectID = 1;
inline void Request::clear_objectid() {
  objectid_.ClearToEmpty();
}
inline const std::string& Request::objectid() const {
  // @@protoc_insertion_point(field_get:recoverKV.Request.objectID)
  return _internal_objectid();
}
inline void Request::set_objectid(const std::string& value) {
  _internal_set_objectid(value);
  // @@protoc_insertion_point(field_set:recoverKV.Request.objectID)
}
inline std::string* Request::mutable_objectid() {
  // @@protoc_insertion_point(field_mutable:recoverKV.Request.objectID)
  return _internal_mutable_objectid();
}
inline const std::string& Request::_internal_objectid() const {
  return objectid_.Get();
}
inline void Request::_internal_set_objectid(const std::string& value) {
  
  objectid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Request::set_objectid(std::string&& value) {
  
  objectid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:recoverKV.Request.objectID)
}
inline void Request::set_objectid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  objectid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:recoverKV.Request.objectID)
}
inline void Request::set_objectid(const char* value,
    size_t size) {
  
  objectid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:recoverKV.Request.objectID)
}
inline std::string* Request::_internal_mutable_objectid() {
  
  return objectid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Request::release_objectid() {
  // @@protoc_insertion_point(field_release:recoverKV.Request.objectID)
  return objectid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Request::set_allocated_objectid(std::string* objectid) {
  if (objectid != nullptr) {
    
  } else {
    
  }
  objectid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), objectid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:recoverKV.Request.objectID)
}

// string key = 2;
inline void Request::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& Request::key() const {
  // @@protoc_insertion_point(field_get:recoverKV.Request.key)
  return _internal_key();
}
inline void Request::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:recoverKV.Request.key)
}
inline std::string* Request::mutable_key() {
  // @@protoc_insertion_point(field_mutable:recoverKV.Request.key)
  return _internal_mutable_key();
}
inline const std::string& Request::_internal_key() const {
  return key_.Get();
}
inline void Request::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Request::set_key(std::string&& value) {
  
  key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:recoverKV.Request.key)
}
inline void Request::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:recoverKV.Request.key)
}
inline void Request::set_key(const char* value,
    size_t size) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:recoverKV.Request.key)
}
inline std::string* Request::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Request::release_key() {
  // @@protoc_insertion_point(field_release:recoverKV.Request.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Request::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:recoverKV.Request.key)
}

// string value = 3;
inline void Request::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& Request::value() const {
  // @@protoc_insertion_point(field_get:recoverKV.Request.value)
  return _internal_value();
}
inline void Request::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:recoverKV.Request.value)
}
inline std::string* Request::mutable_value() {
  // @@protoc_insertion_point(field_mutable:recoverKV.Request.value)
  return _internal_mutable_value();
}
inline const std::string& Request::_internal_value() const {
  return value_.Get();
}
inline void Request::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Request::set_value(std::string&& value) {
  
  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:recoverKV.Request.value)
}
inline void Request::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:recoverKV.Request.value)
}
inline void Request::set_value(const char* value,
    size_t size) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:recoverKV.Request.value)
}
inline std::string* Request::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Request::release_value() {
  // @@protoc_insertion_point(field_release:recoverKV.Request.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Request::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:recoverKV.Request.value)
}

// -------------------------------------------------------------------

// Response

// string value = 1;
inline void Response::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& Response::value() const {
  // @@protoc_insertion_point(field_get:recoverKV.Response.value)
  return _internal_value();
}
inline void Response::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:recoverKV.Response.value)
}
inline std::string* Response::mutable_value() {
  // @@protoc_insertion_point(field_mutable:recoverKV.Response.value)
  return _internal_mutable_value();
}
inline const std::string& Response::_internal_value() const {
  return value_.Get();
}
inline void Response::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Response::set_value(std::string&& value) {
  
  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:recoverKV.Response.value)
}
inline void Response::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:recoverKV.Response.value)
}
inline void Response::set_value(const char* value,
    size_t size) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:recoverKV.Response.value)
}
inline std::string* Response::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Response::release_value() {
  // @@protoc_insertion_point(field_release:recoverKV.Response.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Response::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:recoverKV.Response.value)
}

// int32 successCode = 2;
inline void Response::clear_successcode() {
  successcode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Response::_internal_successcode() const {
  return successcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Response::successcode() const {
  // @@protoc_insertion_point(field_get:recoverKV.Response.successCode)
  return _internal_successcode();
}
inline void Response::_internal_set_successcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  successcode_ = value;
}
inline void Response::set_successcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_successcode(value);
  // @@protoc_insertion_point(field_set:recoverKV.Response.successCode)
}

// -------------------------------------------------------------------

// StateRequest

// string objectID = 1;
inline void StateRequest::clear_objectid() {
  objectid_.ClearToEmpty();
}
inline const std::string& StateRequest::objectid() const {
  // @@protoc_insertion_point(field_get:recoverKV.StateRequest.objectID)
  return _internal_objectid();
}
inline void StateRequest::set_objectid(const std::string& value) {
  _internal_set_objectid(value);
  // @@protoc_insertion_point(field_set:recoverKV.StateRequest.objectID)
}
inline std::string* StateRequest::mutable_objectid() {
  // @@protoc_insertion_point(field_mutable:recoverKV.StateRequest.objectID)
  return _internal_mutable_objectid();
}
inline const std::string& StateRequest::_internal_objectid() const {
  return objectid_.Get();
}
inline void StateRequest::_internal_set_objectid(const std::string& value) {
  
  objectid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StateRequest::set_objectid(std::string&& value) {
  
  objectid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:recoverKV.StateRequest.objectID)
}
inline void StateRequest::set_objectid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  objectid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:recoverKV.StateRequest.objectID)
}
inline void StateRequest::set_objectid(const char* value,
    size_t size) {
  
  objectid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:recoverKV.StateRequest.objectID)
}
inline std::string* StateRequest::_internal_mutable_objectid() {
  
  return objectid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StateRequest::release_objectid() {
  // @@protoc_insertion_point(field_release:recoverKV.StateRequest.objectID)
  return objectid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StateRequest::set_allocated_objectid(std::string* objectid) {
  if (objectid != nullptr) {
    
  } else {
    
  }
  objectid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), objectid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:recoverKV.StateRequest.objectID)
}

// string serversList = 2;
inline void StateRequest::clear_serverslist() {
  serverslist_.ClearToEmpty();
}
inline const std::string& StateRequest::serverslist() const {
  // @@protoc_insertion_point(field_get:recoverKV.StateRequest.serversList)
  return _internal_serverslist();
}
inline void StateRequest::set_serverslist(const std::string& value) {
  _internal_set_serverslist(value);
  // @@protoc_insertion_point(field_set:recoverKV.StateRequest.serversList)
}
inline std::string* StateRequest::mutable_serverslist() {
  // @@protoc_insertion_point(field_mutable:recoverKV.StateRequest.serversList)
  return _internal_mutable_serverslist();
}
inline const std::string& StateRequest::_internal_serverslist() const {
  return serverslist_.Get();
}
inline void StateRequest::_internal_set_serverslist(const std::string& value) {
  
  serverslist_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StateRequest::set_serverslist(std::string&& value) {
  
  serverslist_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:recoverKV.StateRequest.serversList)
}
inline void StateRequest::set_serverslist(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  serverslist_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:recoverKV.StateRequest.serversList)
}
inline void StateRequest::set_serverslist(const char* value,
    size_t size) {
  
  serverslist_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:recoverKV.StateRequest.serversList)
}
inline std::string* StateRequest::_internal_mutable_serverslist() {
  
  return serverslist_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StateRequest::release_serverslist() {
  // @@protoc_insertion_point(field_release:recoverKV.StateRequest.serversList)
  return serverslist_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StateRequest::set_allocated_serverslist(std::string* serverslist) {
  if (serverslist != nullptr) {
    
  } else {
    
  }
  serverslist_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), serverslist,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:recoverKV.StateRequest.serversList)
}

// -------------------------------------------------------------------

// KillRequest

// string objectID = 1;
inline void KillRequest::clear_objectid() {
  objectid_.ClearToEmpty();
}
inline const std::string& KillRequest::objectid() const {
  // @@protoc_insertion_point(field_get:recoverKV.KillRequest.objectID)
  return _internal_objectid();
}
inline void KillRequest::set_objectid(const std::string& value) {
  _internal_set_objectid(value);
  // @@protoc_insertion_point(field_set:recoverKV.KillRequest.objectID)
}
inline std::string* KillRequest::mutable_objectid() {
  // @@protoc_insertion_point(field_mutable:recoverKV.KillRequest.objectID)
  return _internal_mutable_objectid();
}
inline const std::string& KillRequest::_internal_objectid() const {
  return objectid_.Get();
}
inline void KillRequest::_internal_set_objectid(const std::string& value) {
  
  objectid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void KillRequest::set_objectid(std::string&& value) {
  
  objectid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:recoverKV.KillRequest.objectID)
}
inline void KillRequest::set_objectid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  objectid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:recoverKV.KillRequest.objectID)
}
inline void KillRequest::set_objectid(const char* value,
    size_t size) {
  
  objectid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:recoverKV.KillRequest.objectID)
}
inline std::string* KillRequest::_internal_mutable_objectid() {
  
  return objectid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* KillRequest::release_objectid() {
  // @@protoc_insertion_point(field_release:recoverKV.KillRequest.objectID)
  return objectid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KillRequest::set_allocated_objectid(std::string* objectid) {
  if (objectid != nullptr) {
    
  } else {
    
  }
  objectid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), objectid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:recoverKV.KillRequest.objectID)
}

// string serverName = 2;
inline void KillRequest::clear_servername() {
  servername_.ClearToEmpty();
}
inline const std::string& KillRequest::servername() const {
  // @@protoc_insertion_point(field_get:recoverKV.KillRequest.serverName)
  return _internal_servername();
}
inline void KillRequest::set_servername(const std::string& value) {
  _internal_set_servername(value);
  // @@protoc_insertion_point(field_set:recoverKV.KillRequest.serverName)
}
inline std::string* KillRequest::mutable_servername() {
  // @@protoc_insertion_point(field_mutable:recoverKV.KillRequest.serverName)
  return _internal_mutable_servername();
}
inline const std::string& KillRequest::_internal_servername() const {
  return servername_.Get();
}
inline void KillRequest::_internal_set_servername(const std::string& value) {
  
  servername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void KillRequest::set_servername(std::string&& value) {
  
  servername_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:recoverKV.KillRequest.serverName)
}
inline void KillRequest::set_servername(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  servername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:recoverKV.KillRequest.serverName)
}
inline void KillRequest::set_servername(const char* value,
    size_t size) {
  
  servername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:recoverKV.KillRequest.serverName)
}
inline std::string* KillRequest::_internal_mutable_servername() {
  
  return servername_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* KillRequest::release_servername() {
  // @@protoc_insertion_point(field_release:recoverKV.KillRequest.serverName)
  return servername_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KillRequest::set_allocated_servername(std::string* servername) {
  if (servername != nullptr) {
    
  } else {
    
  }
  servername_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), servername,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:recoverKV.KillRequest.serverName)
}

// int32 cleanType = 3;
inline void KillRequest::clear_cleantype() {
  cleantype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KillRequest::_internal_cleantype() const {
  return cleantype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KillRequest::cleantype() const {
  // @@protoc_insertion_point(field_get:recoverKV.KillRequest.cleanType)
  return _internal_cleantype();
}
inline void KillRequest::_internal_set_cleantype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cleantype_ = value;
}
inline void KillRequest::set_cleantype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cleantype(value);
  // @@protoc_insertion_point(field_set:recoverKV.KillRequest.cleanType)
}

// -------------------------------------------------------------------

// PartitionRequest

// string objectID = 1;
inline void PartitionRequest::clear_objectid() {
  objectid_.ClearToEmpty();
}
inline const std::string& PartitionRequest::objectid() const {
  // @@protoc_insertion_point(field_get:recoverKV.PartitionRequest.objectID)
  return _internal_objectid();
}
inline void PartitionRequest::set_objectid(const std::string& value) {
  _internal_set_objectid(value);
  // @@protoc_insertion_point(field_set:recoverKV.PartitionRequest.objectID)
}
inline std::string* PartitionRequest::mutable_objectid() {
  // @@protoc_insertion_point(field_mutable:recoverKV.PartitionRequest.objectID)
  return _internal_mutable_objectid();
}
inline const std::string& PartitionRequest::_internal_objectid() const {
  return objectid_.Get();
}
inline void PartitionRequest::_internal_set_objectid(const std::string& value) {
  
  objectid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PartitionRequest::set_objectid(std::string&& value) {
  
  objectid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:recoverKV.PartitionRequest.objectID)
}
inline void PartitionRequest::set_objectid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  objectid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:recoverKV.PartitionRequest.objectID)
}
inline void PartitionRequest::set_objectid(const char* value,
    size_t size) {
  
  objectid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:recoverKV.PartitionRequest.objectID)
}
inline std::string* PartitionRequest::_internal_mutable_objectid() {
  
  return objectid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PartitionRequest::release_objectid() {
  // @@protoc_insertion_point(field_release:recoverKV.PartitionRequest.objectID)
  return objectid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PartitionRequest::set_allocated_objectid(std::string* objectid) {
  if (objectid != nullptr) {
    
  } else {
    
  }
  objectid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), objectid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:recoverKV.PartitionRequest.objectID)
}

// string serverName = 2;
inline void PartitionRequest::clear_servername() {
  servername_.ClearToEmpty();
}
inline const std::string& PartitionRequest::servername() const {
  // @@protoc_insertion_point(field_get:recoverKV.PartitionRequest.serverName)
  return _internal_servername();
}
inline void PartitionRequest::set_servername(const std::string& value) {
  _internal_set_servername(value);
  // @@protoc_insertion_point(field_set:recoverKV.PartitionRequest.serverName)
}
inline std::string* PartitionRequest::mutable_servername() {
  // @@protoc_insertion_point(field_mutable:recoverKV.PartitionRequest.serverName)
  return _internal_mutable_servername();
}
inline const std::string& PartitionRequest::_internal_servername() const {
  return servername_.Get();
}
inline void PartitionRequest::_internal_set_servername(const std::string& value) {
  
  servername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PartitionRequest::set_servername(std::string&& value) {
  
  servername_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:recoverKV.PartitionRequest.serverName)
}
inline void PartitionRequest::set_servername(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  servername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:recoverKV.PartitionRequest.serverName)
}
inline void PartitionRequest::set_servername(const char* value,
    size_t size) {
  
  servername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:recoverKV.PartitionRequest.serverName)
}
inline std::string* PartitionRequest::_internal_mutable_servername() {
  
  return servername_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PartitionRequest::release_servername() {
  // @@protoc_insertion_point(field_release:recoverKV.PartitionRequest.serverName)
  return servername_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PartitionRequest::set_allocated_servername(std::string* servername) {
  if (servername != nullptr) {
    
  } else {
    
  }
  servername_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), servername,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:recoverKV.PartitionRequest.serverName)
}

// string reachable = 3;
inline void PartitionRequest::clear_reachable() {
  reachable_.ClearToEmpty();
}
inline const std::string& PartitionRequest::reachable() const {
  // @@protoc_insertion_point(field_get:recoverKV.PartitionRequest.reachable)
  return _internal_reachable();
}
inline void PartitionRequest::set_reachable(const std::string& value) {
  _internal_set_reachable(value);
  // @@protoc_insertion_point(field_set:recoverKV.PartitionRequest.reachable)
}
inline std::string* PartitionRequest::mutable_reachable() {
  // @@protoc_insertion_point(field_mutable:recoverKV.PartitionRequest.reachable)
  return _internal_mutable_reachable();
}
inline const std::string& PartitionRequest::_internal_reachable() const {
  return reachable_.Get();
}
inline void PartitionRequest::_internal_set_reachable(const std::string& value) {
  
  reachable_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PartitionRequest::set_reachable(std::string&& value) {
  
  reachable_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:recoverKV.PartitionRequest.reachable)
}
inline void PartitionRequest::set_reachable(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reachable_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:recoverKV.PartitionRequest.reachable)
}
inline void PartitionRequest::set_reachable(const char* value,
    size_t size) {
  
  reachable_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:recoverKV.PartitionRequest.reachable)
}
inline std::string* PartitionRequest::_internal_mutable_reachable() {
  
  return reachable_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PartitionRequest::release_reachable() {
  // @@protoc_insertion_point(field_release:recoverKV.PartitionRequest.reachable)
  return reachable_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PartitionRequest::set_allocated_reachable(std::string* reachable) {
  if (reachable != nullptr) {
    
  } else {
    
  }
  reachable_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reachable,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:recoverKV.PartitionRequest.reachable)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace recoverKV

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_recoverKV_2eproto
