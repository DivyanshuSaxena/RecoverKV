// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package recoverKV

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RecoverKVClient is the client API for RecoverKV service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RecoverKVClient interface {
	// Function invoked for fetching value
	GetValue(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	// Function invoked for fetching value
	SetValue(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type recoverKVClient struct {
	cc grpc.ClientConnInterface
}

func NewRecoverKVClient(cc grpc.ClientConnInterface) RecoverKVClient {
	return &recoverKVClient{cc}
}

func (c *recoverKVClient) GetValue(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/recoverKV.RecoverKV/getValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recoverKVClient) SetValue(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/recoverKV.RecoverKV/setValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecoverKVServer is the server API for RecoverKV service.
// All implementations must embed UnimplementedRecoverKVServer
// for forward compatibility
type RecoverKVServer interface {
	// Function invoked for fetching value
	GetValue(context.Context, *Request) (*Response, error)
	// Function invoked for fetching value
	SetValue(context.Context, *Request) (*Response, error)
	mustEmbedUnimplementedRecoverKVServer()
}

// UnimplementedRecoverKVServer must be embedded to have forward compatible implementations.
type UnimplementedRecoverKVServer struct {
}

func (UnimplementedRecoverKVServer) GetValue(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValue not implemented")
}
func (UnimplementedRecoverKVServer) SetValue(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetValue not implemented")
}
func (UnimplementedRecoverKVServer) mustEmbedUnimplementedRecoverKVServer() {}

// UnsafeRecoverKVServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RecoverKVServer will
// result in compilation errors.
type UnsafeRecoverKVServer interface {
	mustEmbedUnimplementedRecoverKVServer()
}

func RegisterRecoverKVServer(s grpc.ServiceRegistrar, srv RecoverKVServer) {
	s.RegisterService(&RecoverKV_ServiceDesc, srv)
}

func _RecoverKV_GetValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecoverKVServer).GetValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/recoverKV.RecoverKV/getValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecoverKVServer).GetValue(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecoverKV_SetValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecoverKVServer).SetValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/recoverKV.RecoverKV/setValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecoverKVServer).SetValue(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

// RecoverKV_ServiceDesc is the grpc.ServiceDesc for RecoverKV service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RecoverKV_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "recoverKV.RecoverKV",
	HandlerType: (*RecoverKVServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getValue",
			Handler:    _RecoverKV_GetValue_Handler,
		},
		{
			MethodName: "setValue",
			Handler:    _RecoverKV_SetValue_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "recoverKV.proto",
}
